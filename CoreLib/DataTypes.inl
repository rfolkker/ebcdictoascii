/*
//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3::SFloat3( const float *pf )
{
	x = pf[0];
	y = pf[1];
	z = pf[2];
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3::SFloat3( const SFloat3& v )
{
	x = v.x;
	y = v.y;
	z = v.z;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3::SFloat3( float fx, float fy, float fz )
{
	x = fx;
	y = fy;
	z = fz;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// casting
__forceinline SFloat3::operator float* ()
{
	return (float *) &x;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3::operator const float* () const
{
	return (const float *) &x;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// assignment operators 
__forceinline SFloat3& SFloat3::operator += ( const SFloat3& v )
{
	x += v.x;
	y += v.y;
	z += v.z;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3& SFloat3::operator -= ( const SFloat3& v )
{
	x -= v.x;
	y -= v.y;
	z -= v.z;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3& SFloat3::operator *= ( float f )
{
	x *= f;
	y *= f;
	z *= f;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3& SFloat3::operator /= ( float f )
{
	float fInv = 1.0f / f;
	x *= fInv;
	y *= fInv;
	z *= fInv;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// unary operators
__forceinline SFloat3 SFloat3::operator + () const
{
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3 SFloat3::operator - () const
{
	return SFloat3(-x, -y, -z);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// binary operators 
__forceinline SFloat3 SFloat3::operator + ( const SFloat3& v ) const
{
	return SFloat3(x + v.x, y + v.y, z + v.z);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3 SFloat3::operator - ( const SFloat3& v ) const
{
	return SFloat3(x - v.x, y - v.y, z - v.z);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3 SFloat3::operator * ( float f ) const
{
	return SFloat3(x * f, y * f, z * f);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat3 SFloat3::operator / ( float f ) const
{
	float fInv = 1.0f / f;
	return SFloat3(x * fInv, y * fInv, z * fInv);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline BOOL SFloat3::operator == ( const SFloat3& v ) const
{
	return x == v.x && y == v.y && z == v.z;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline BOOL SFloat3::operator != ( const SFloat3& v ) const
{
	return x != v.x || y != v.y || z != v.z;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline void SFloat3::Init(float x, float y, float z)
{
	this->x = x;
	this->y = y;
	this->z = z;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline float SFloat3::Magnitude (void)
{
	return sqrtf(SquareMagnitude());
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline float SFloat3::SquareMagnitude (void)
{
	return x*x + y*y + z*z;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline void SFloat3::Normalize (void)
{
	float f;

	f = Magnitude();
	if (f != 0.0f)
	{
		f = 1.0f/f;
		x *= f;
		y *= f;
		z *= f;
	}
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2::SFloat2(const float *pf)
{
	x = pf[0];
	y = pf[1];
}

__forceinline SFloat2::SFloat2(float fx, float fy)
{
	x = fx;
	y = fy;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// casting
__forceinline SFloat2::operator float* ()
{
	return (float *) &x;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2::operator const float* () const
{
	return (const float *) &x;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// assignment operators 
__forceinline SFloat2& SFloat2::operator += ( const SFloat2& v )
{
	x += v.x;
	y += v.y;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2& SFloat2::operator -= ( const SFloat2& v )
{
	x -= v.x;
	y -= v.y;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2& SFloat2::operator *= ( float f )
{
	x *= f;
	y *= f;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2& SFloat2::operator /= ( float f )
{
	float fInv = 1.0f / f;
	x *= fInv;
	y *= fInv;
	return *this;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// unary operators 
__forceinline SFloat2 SFloat2::operator + () const
{
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2 SFloat2::operator - () const
{
	return SFloat2(-x, -y);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// binary operators
__forceinline SFloat2 SFloat2::operator + ( const SFloat2& v ) const
{
	return SFloat2(x + v.x, y + v.y);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2 SFloat2::operator - ( const SFloat2& v ) const
{
	return SFloat2(x - v.x, y - v.y);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2 SFloat2::operator * ( float f ) const
{
	return SFloat2(x * f, y * f);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2 SFloat2::operator / ( float f ) const
{
	float fInv = 1.0f / f;
	return SFloat2(x * fInv, y * fInv);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat2 operator * ( float f, const SFloat2& v )
{
	return SFloat2(f * v.x, f * v.y);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline BOOL SFloat2::operator == ( const SFloat2& v ) const
{
	return x == v.x && y == v.y;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline BOOL SFloat2::operator != ( const SFloat2& v ) const
{
	return x != v.x || y != v.y;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4::SFloat4( const float *pf )
{
	x = pf[0];
	y = pf[1];
	z = pf[2];
	w = pf[3];
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4::SFloat4( const SFloat3& v, float f )
{
	x = v.x;
	y = v.y;
	z = v.z;
	w = f;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4::SFloat4( float fx, float fy, float fz, float fw )
{
	x = fx;
	y = fy;
	z = fz;
	w = fw;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// casting
__forceinline SFloat4::operator float* ()
{
	return (float *) &x;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4::operator const float* () const
{
	return (const float *) &x;
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// assignment operators
__forceinline SFloat4& SFloat4::operator += ( const SFloat4& v )
{
	x += v.x;
	y += v.y;
	z += v.z;
	w += v.w;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4& SFloat4::operator -= ( const SFloat4& v )
{
	x -= v.x;
	y -= v.y;
	z -= v.z;
	w -= v.w;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4& SFloat4::operator *= ( float f )
{
	x *= f;
	y *= f;
	z *= f;
	w *= f;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4& SFloat4::operator /= ( float f )
{
	float fInv = 1.0f / f;
	x *= fInv;
	y *= fInv;
	z *= fInv;
	w *= fInv;
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// unary operators 
__forceinline SFloat4 SFloat4::operator + () const
{
	return *this;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4 SFloat4::operator - () const
{
	return SFloat4(-x, -y, -z, -w);
}


//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
// binary operators 
__forceinline SFloat4 SFloat4::operator + ( const SFloat4& v ) const
{
	return SFloat4(x + v.x, y + v.y, z + v.z, w + v.w);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4 SFloat4::operator - ( const SFloat4& v ) const
{
	return SFloat4(x - v.x, y - v.y, z - v.z, w - v.w);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4 SFloat4::operator * ( float f ) const
{
	return SFloat4(x * f, y * f, z * f, w * f);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4 SFloat4::operator / ( float f ) const
{
	float fInv = 1.0f / f;
	return SFloat4(x * fInv, y * fInv, z * fInv, w * fInv);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline SFloat4 operator * ( float f, const SFloat4& v )
{
	return SFloat4(f * v.x, f * v.y, f * v.z, f * v.w);
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline BOOL SFloat4::operator == ( const SFloat4& v ) const
{
	return x == v.x && y == v.y && z == v.z && w == v.w;
}

//////////////////////////////////////////////////////////////////////////
//																		//
//																		//
//////////////////////////////////////////////////////////////////////////
__forceinline BOOL SFloat4::operator != ( const SFloat4& v ) const
{
	return x != v.x || y != v.y || z != v.z || w != v.w;
}

*/
