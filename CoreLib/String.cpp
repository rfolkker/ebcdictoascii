#include "String.h"
#include <stdio.h>
#include "PointerRemapper.h"


CString gszEmptyString;


void InitEmptyString(void) { gszEmptyString.Init(); }
void KillEmptyString(void) { gszEmptyString.Kill(); }


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Init(void)
{
	mcText.Init();
	Set("");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Init(char* sz)
{
	mcText.Init();
	Set(sz);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Init(CString sz)
{
	mcText.Init();
	mcText.Copy(&(sz.mcText));
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Init(int iChunkSize)
{
	mcText.Init(iChunkSize);
	Set("");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Init(char c, int iNumber)
{
	mcText.Init();
	Set("");
	Append(c, iNumber);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Kill(void)
{
	mcText.Kill();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
int CString::Length(void)
{
	//Don't include the zero char at the end of the string.
	if (!mcText.pvArray)
	{
		return 0;
	}
	return mcText.NumElements()-1;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Set(char* sz)
{
	int iLen;

	if (sz)
	{
		iLen = ((int)strlen(sz)) + 1;
		mcText.GrowToNumElements(iLen);
		strcpy(mcText.pvArray, sz);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Append(char* sz)
{
	int		iLen;
	char*	pcPosition;
	
	if (sz)
	{
		iLen = (int)strlen(sz);
		pcPosition = PrivateGrow(iLen);
		strcpy(pcPosition, sz);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Append(char* sz, int iLength)
{
	char*	pcPosition;

	if ((sz) && (iLength))
	{
		pcPosition = PrivateGrow(iLength);
		memcpy(pcPosition, sz, iLength);
		(*mcText.Tail()) =  0;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Append(char c)
{
	char* pcZero;
	char* pcReplace;

	pcReplace = mcText.Tail();
	*pcReplace = c;
	pcZero = mcText.Add();
	*pcZero = 0;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Append(CString sz)
{
	Append(sz.Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Append(int i)
{
	char sz[32];

	sprintf(sz, "%i", i);
	Append(sz);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Append(float f)
{
	char sz[32];

	sprintf(sz, "%.2f", f);
	Append(sz);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::AppendNewLine(void)
{
	Append("\n");
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Minimize(void)
{
	mcText.Finalise();
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CString::Text(void)
{
	return mcText.pvArray;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::Empty(void)
{
	if (Length() == 0)
	{
		return TRUE;
	}
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
char* CString::PrivateGrow(int iNumberOfCharacters)
{
	char*	pcPosition;
	int		iPosition;

	iPosition = mcText.GrowByNumElements(iNumberOfCharacters);
	pcPosition = (char*)RemapSinglePointer((void*)mcText.pvArray, iPosition-1);
	return pcPosition;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Append(char cPadCharacter, int iNumber)
{
	char*	pcPosition;

	if (iNumber > 0)
	{
		pcPosition = PrivateGrow(iNumber);
		memset(pcPosition, cPadCharacter, iNumber);
		pcPosition = mcText.Tail();
		*pcPosition = 0;
	}
}

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::LeftAlign(char* sz, char cPadCharacter, int iWidth)
{
	if (sz)
	{
		if ((int)strlen(sz) <= iWidth)
		{
			Append(sz);
			Append(cPadCharacter, iWidth-(int)strlen(sz));
		}
		else
		{
			//AppendSubString(sz, 0, iWidth);
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::RightAlign(char* sz, char cPadCharacter, int iWidth)
{
	if (sz)
	{
		if ((int)strlen(sz) <= iWidth)
		{
			Append(cPadCharacter, iWidth-(int)strlen(sz));
			Append(sz);
		}
		else
		{
			//AppendSubString(sz, 0, iWidth);
		}
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::LeftAlign(CString sz, char cPadCharacter, int iWidth)
{
	if (sz.Length() <= iWidth)
	{
		Append(sz);
		Append(cPadCharacter, iWidth-sz.Length());
	}
	else
	{
		AppendSubString(sz, 0, iWidth);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::RightAlign(CString sz, char cPadCharacter, int iWidth)
{
	if (sz.Length() <= iWidth)
	{
		Append(cPadCharacter, iWidth-sz.Length());
		Append(sz);
	}
	else
	{
		AppendSubString(sz, 0, iWidth);
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::AppendSubString(CString sz, int iStartInclusive, int iEndExclusive)
{
	char* pcPosition;

	pcPosition = (char*)RemapSinglePointer((void*)sz.Text(), iStartInclusive);
	Append(pcPosition, iEndExclusive-iStartInclusive);
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::RemoveLastCharacter(void)
{
	char*	pcPosition;

	if (mcText.NumElements() > 1)
	{
		mcText.RemoveTail();
		pcPosition = mcText.Tail();
		*pcPosition = 0;
	}
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::Equals(char* szString)
{
	if (strcmp(Text(), szString) == 0)
	{
		return TRUE;
	}
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::Equals(CString szString)
{
	return Equals(szString.Text());
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
BOOL CString::Contains(char* szString)
{
	char*	pc;

	pc = strstr(Text(), szString);
	if (pc)
	{
		return TRUE;
	}
	return FALSE;
}


//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
void CString::Dump(void)
{
//	OutputDebugString(Text());
//	OutputDebugString("\n");
}

